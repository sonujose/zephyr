package handler

import (
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	"github.com/sonujose/kube-spectrum/api/handler/kube"
	_ "github.com/sonujose/kube-spectrum/docs" // docs is generated by Swag CLI, you have to import it.
)

const (
	basePath = "/api/v1"
)

// RegisterAPIRoutes - routes for all api
func RegisterAPIRoutes(router *gin.Engine, logger *logrus.Logger) {

	// Generic api handler
	kubeHandler := kube.NewHandler()

	logger.Infof("Registering api endpoints with basepath - %s", basePath)

	apiV1 := router.Group(basePath)
	{
		// Services
		apiV1.GET("/services/:namespace", kubeHandler.GetServices)
		apiV1.GET("/namespaces", kubeHandler.GetNamespaces)
	}

	// Registering swagger endpoints
	url := ginSwagger.URL(basePath + "/swagger/doc.json") // The url pointing to API definition
	router.GET(basePath+"/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, url))
	logger.Infof("Exposing swagger endpoints at path - %s/swagger/index.html", basePath)

	// Healthchecks endpoint at "/healthz"
	router.GET(basePath+"/healthz", getHealthStatus)
	logger.Infof("Registered Health probes endpoint - %s/healthz", basePath)
}

// getHealthStatus - Endpoint for healthstatus
// To be used for liveness and readiness probes
func getHealthStatus(c *gin.Context) {
	healthcheckStatus := &HealthStatus{Status: "UP"}
	c.JSON(http.StatusOK, healthcheckStatus)
}

// HealthStatus - model for healthstatus
type HealthStatus struct {
	Status string `json:"status"`
}
