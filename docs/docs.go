// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/namespaces": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Namespace"
                ],
                "summary": "Get list of namespace",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.NamespaceListResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ErrorResponse"
                            }
                        }
                    }
                }
            }
        },
        "/services/{namespace}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "*/*"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Services"
                ],
                "summary": "Get services for specified namespace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "namespace",
                        "name": "namespace",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ServiceResultResponse"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dto.ErrorResponse"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.ErrorResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "isSuccess": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "dto.NamespaceListResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "isSuccess": {
                    "type": "boolean"
                }
            }
        },
        "dto.ServiceResultResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.ServiceDto"
                    }
                },
                "isSuccess": {
                    "type": "boolean"
                }
            }
        },
        "service.PodInfo": {
            "type": "object",
            "properties": {
                "isReady": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "reason": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "service.Ports": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "targetPort": {
                    "type": "string"
                }
            }
        },
        "service.ServiceDto": {
            "type": "object",
            "properties": {
                "annotations": {
                    "description": "List of all annotations associated with the service",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "clusterIP": {
                    "description": "ClusterIP is usually assigned by the master. Valid values are None, empty string (\"\"), or\na valid IP address. None can be specified for headless services when proxying is not required",
                    "type": "string"
                },
                "creationTimestamp": {
                    "description": "Time when the service was created",
                    "type": "string"
                },
                "externalIP": {
                    "description": "ExternalIP is the Ip of the Loadbalancer attached with the service\nIf service type is not Loadbalaner then IP will be none",
                    "type": "string"
                },
                "labels": {
                    "description": "List of all labels associated with the service",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "description": "Name of the service",
                    "type": "string"
                },
                "namespace": {
                    "description": "Namespace where service is created",
                    "type": "string"
                },
                "podInfo": {
                    "description": "Pod Instances",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.PodInfo"
                    }
                },
                "ports": {
                    "description": "Ports mapped to the service",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/service.Ports"
                    }
                },
                "selector": {
                    "description": "Label selector of the service.",
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "state": {
                    "description": "Success statsus, check if any one pod is available to pass request",
                    "type": "string"
                },
                "type": {
                    "description": "Type determines how the service will be exposed.  Valid options: ClusterIP, NodePort, LoadBalancer, ExternalName",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "2.0",
	Host:        "",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "Kube-spectrum kubernetes Service",
	Description: "Kube-spectrum kubernetes Dashboard Service",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
